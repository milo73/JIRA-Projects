<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="Jira REST BR gathering" soapui-version="5.0.0" abortOnError="false" runType="SEQUENTIAL" resourceRoot="" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://jira.eurodir.eu" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://jira.eurodir.eu</con:endpoint></con:endpoints><con:resource name="Search" path="/jira/rest/api/2/search"><con:settings/><con:parameters><con:parameter><con:name>jql</con:name><con:value>cf[10931]=DESIGN-26</con:value><con:style>QUERY</con:style><con:default>cf[10931]=DESIGN-26</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Search" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:sear="https://jira.eurodir.eu/jira/rest/api/2/search">sear:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:sear="https://jira.eurodir.eu/jira/rest/api/2/search">sear:Response</con:element></con:representation><con:request name="Get Epic children" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://jira.eurodir.eu</con:endpoint><con:request/><con:originalUri>https://jira.eurodir.eu/jira/rest/api/2/search</con:originalUri><con:credentials><con:username>mdiest</con:username><con:password>B1lderdijk@26</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="jql" value="cf[10931]=DESIGN-225" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>jql</con:entry></con:parameterOrder></con:request><con:request name="Get Epics" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://jira.eurodir.eu</con:endpoint><con:request/><con:originalUri>https://jira.eurodir.eu/jira/rest/api/2/search</con:originalUri><con:credentials><con:username>mdiest</con:username><con:password>B1lderdijk@26</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="jql" value="project='DESIGN'&amp;fixVersion='BR 7'&amp;issuetype='Epic'" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>jql</con:entry></con:parameterOrder></con:request><con:request name="Copy of Get Epic children" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://jira.eurodir.eu</con:endpoint><con:request/><con:originalUri>https://jira.eurodir.eu/jira/rest/api/2/search</con:originalUri><con:credentials><con:username>mdiest</con:username><con:password>B1lderdijk@26</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>jql</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:testSuite name="TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="BRM_Epics" searchProperties="true" id="f5c35e68-bbe9-47cb-bdef-37ba85ae2788"><con:settings/><con:testStep type="restrequest" name="Get_Epics"><con:settings/><con:config service="https://jira.eurodir.eu" resourcePath="/jira/rest/api/2/search" methodName="Search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get_Epics" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://jira.eurodir.eu</con:endpoint><con:request/><con:originalUri>https://jira.eurodir.eu/jira/rest/api/2/search</con:originalUri><con:credentials><con:username>mdiest</con:username><con:password>B1lderdijk@26</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="jql" value="project='DESIGN'&amp;fixVersion='BR 7'&amp;issuetype='Epic'" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>jql</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="MyEpicRequest"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>EpicSummary</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get_Epics</con:sourceStep><con:sourcePath>//Reponse/issues/e/summary</con:sourcePath><con:targetType>Epic_Summary</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" useXQuery="false" ignoreEmpty="false" transferToAll="false" entitize="false"><con:name>EpicNr</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get_Epics</con:sourceStep><con:sourcePath>//Reponse/issues/e/key</con:sourcePath><con:targetType>Epic_Nr</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="EpicSaveResponse"><con:settings/><con:config><script>def myOutFile = "D:/Temp/JIRA/response.xml"
def response = context.expand( '${Get_Epics#ResponseAsXml}' )
def f = new File(myOutFile)
f.write(response, "UTF-8")</script></con:config></con:testStep><con:testStep type="restrequest" name="REST Test Request" disabled="true"><con:settings/><con:config service="https://jira.eurodir.eu" methodName="Search" resourcePath="/jira/rest/api/2/search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="REST Test Request" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://jira.eurodir.eu</con:endpoint><con:request/><con:originalUri>https://jira.eurodir.eu/jira/rest/api/2/search</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:entry key="jql" value="cf[10931]=DESIGN-26"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>EPICSNR</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>REST Test Request</con:sourceStep></con:transfers></con:config></con:testStep><con:properties><con:property><con:name>Brm_Nr</con:name><con:value>7</con:value></con:property><con:property><con:name>Epic_Nr</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Epic_Summary</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Looping" searchProperties="true" id="68a87496-2117-4c3f-a5c3-55abe8385ff0"><con:settings/><con:testStep type="groovy" name="Groovy Script – DataSource"><con:settings/><con:config><script>/*
@Author : Pradeep Bishnoi
@Description : Data Source to read .txt file and pass the value to corresponding property.
@GroovyTestStepName : "Groovy Script - DataSource"
*/
 
import com.eviware.soapui.support.XmlHolder
def myTestCase = context.testCase
def counter,next,previous,size
File tickerEnumFile = new File("D:/Temp/JIRA/Input.txt") //make sure input.txt file already exists and contains different set of values sepearted by new line (CR).
List lines = tickerEnumFile.readLines()
size = lines.size.toInteger()
log.info "Amount of Epics in BRM: " + size.toString()
def propTestStep = myTestCase.getTestStepByName("Property – Looper") // get the Property TestStep
propTestStep.setPropertyValue("Total", size.toString())
counter = propTestStep.getPropertyValue("Count").toString()
log.info "counter: " + counter
counter= counter.toInteger()
next = (counter > size-2? 0: counter+1)
tempValue = lines[counter]
propTestStep.setPropertyValue("Value", tempValue)
propTestStep.setPropertyValue("Count", next.toString())
next++
log.info "Reading line : ${(counter+1)} / $lines.size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"
if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Property – Looper"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>Total</con:name><con:value>15</con:value></con:property><con:property><con:name>Value</con:name><con:value>DESIGN-495</con:value></con:property><con:property><con:name>Count</con:name><con:value>0</con:value></con:property><con:property><con:name>Next</con:name><con:value>1</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>rowCount</con:name><con:value>163</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="Get Epic Children" disabled="true"><con:settings/><con:config><script>myInterface = testRunner.testCase.testSuite.project.getInterfaceByName("https://jira.eurodir.eu/jira/rest/api/2/")
myOperation = myInterface.getOperationByName("search")
myRequest = myOperation.getRequestByName("?jql=cf[10931]=DESIGN-26")
// get the context
def context = testRunner.getRunContext()
// send the request synchronous
def submitted = myRequest.submit(context,false)
// get the response
def response = submitted.getResponse()
// get the response content as string 
def content = response.getContentAsString()
// i.e check that the response contains literal 'OK'
assert content.contains('OK'),"Response not contains OK literal"</script></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="true" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>EpicValue</con:name><con:sourceType>Value</con:sourceType><con:sourceStep>Property – Looper</con:sourceStep><con:targetType>EpicValue</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="REST Get Epic Children"><con:settings/><con:config service="https://jira.eurodir.eu" resourcePath="/jira/rest/api/2/search" methodName="Search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="REST Get Epic Children" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://jira.eurodir.eu</con:endpoint><con:request/><con:originalUri>https://jira.eurodir.eu/jira/rest/api/2/search</con:originalUri><con:credentials><con:username>mdiest</con:username><con:password>B1lderdijk@26</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="jql" value="cf[10931]=${#TestSuite#EpicValue}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>jql</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Read REST Response" disabled="true"><con:settings/><con:config><script>/*
@Author: Pradeep Bishnoi
@Description : To read the REST response and iterate node using Xpath
*/
log.info "Start"
//def testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
def xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
log.info "xmlHold: " xmlHold
/*
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context )
def holder = groovyUtils.getXmlHolder (xmlHold)
log.info holder.getXml()  // will display /Log the response in Xml
count  = holder.getNodeValue(“count(//Response/e)”)
count = count.toInteger() + 1  //converting count into Integer &amp; adding 1 for looping purpose
def xPath = “//Response/issues"

/*
for (i in 1..&lt;count)
{
xPath1 = xPath + i + "]/Name”  // Name value
xPath2 = xPath + i + “]/EmailAddresses/e”   //email Node value
log.info holder.getNodeValue(xPath1)
log.info holder.getNodeValue(xPath2)
i++
}
*/
//log.info xPath
</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script – Data Loop"><con:settings/><con:config><script>/*&lt;/pre>
@Author : Pradeep Bishnoi
@Description : Data Source Looper responsible for looping a specific teststep.
@GroovyTestStepName : "Groovy Script - Data Loop"
*/
//import necessary libs
import jxl.*
import jxl.write.*
import com.eviware.soapui.support.XmlHolder

def myTestCase = context.testCase
log.info "Testcase: " + myTestCase.getLabel()
log.info "Testsuite: " + myTestCase.getParent().getLabel()

def propTestStep = myTestCase.getTestStepByName("Property – Looper") // get the Property TestStep
def endLoop = propTestStep.getPropertyValue("StopLoop").toString()
log.info "End loop: " + endLoop.toString()
def runner
//Define the object for the collection of requests in the soapUI test case
def restTestStep = myTestCase.getTestStepByName("REST Get Epic Children") // get the Property TestStep
log.info restTestStep.name


// Groovy Script to loop through each requests in the test case.
restTestStep.each{
 // Creating file name using current date and time
 Date startTime = new Date();
 def cur_Time = startTime.getMonth() + "_" + startTime.getDate();
 cur_Time = cur_Time + "_" + startTime.getHours() + startTime.getMinutes() +startTime.getSeconds()
 def fileName = it.name + "_" + propTestStep.getPropertyValue("Value").toString()
 int rowCount = Integer.parseInt( propTestStep.getPropertyValue("rowCount"))
 log.info "rowCount: " + rowCount
 def inputFileResponse = new File("D:\\Temp\\JIRA\\"+ "Response_" + fileName+".xml")
// Writing soapUI response to the file
 inputFileResponse.write(context.testCase.getTestStepByName(it.name).getProperty("ResponseAsXml").value)

// create an XmlHolder
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
// get the response as string
def responseAsString = context.testCase.getTestStepByName(it.name).getProperty("ResponseAsXml").value    
def holderResponse = groovyUtils.getXmlHolder(responseAsString)
// define namespace
holderResponse.namespaces["xmlns"] = "https://jira.eurodir.eu/jira/rest/api/2/search"

// get the node value
epicStoryCount = holderResponse.getNodeValues("//xmlns:Response/xmlns:total")
epicName = holderResponse.getNodeValue("//xmlns:issues[1]/xmlns:e[1]/xmlns:fields[1]/xmlns:customfield_10931[1]")
log.info "Epic '" + epicName + "' has '" + epicStoryCount + "' stories"

//Write response to Excel;
Workbook workbookRead = Workbook.getWorkbook(new File("D:\\Temp\\JIRA\\output.xls"))
WritableWorkbook workbook = Workbook.createWorkbook(new File("D:\\Temp\\JIRA\\output.xls"), workbookRead)

Sheet sheet = workbook.getSheet(0)
//WritableSheet sheet = workbook.createSheet(epicName,0 )
log.info "rowCount: " + rowCount
//log.info(sheet.isHidden())


// loop item nodes in response message
i=rowCount;
for( item in holderResponse.getNodeValues( "//xmlns:issues/xmlns:e/xmlns:key" )){
//log.info "Key : [$item]"
Label label = new Label(0, i, item); //column=0=A,row=0=1
sheet.addCell(label);
i++;
}
i=rowCount
for( item in holderResponse.getNodeValues( "//xmlns:issues/xmlns:e/xmlns:fields[1]/xmlns:summary[1]" )){
//log.info "Summary : [$item]"
Label label = new Label(1, i, item); //column=0=A,row=0=1
sheet.addCell(label);
i++;
}
i=rowCount
for( item in holderResponse.getNodeValues( "//xmlns:issues/xmlns:e/xmlns:fields[1]/xmlns:status[1]/xmlns:name[1]" )){
//log.info "Status : [$item]"
Label label = new Label(2, i, item); //column=0=A,row=0=1
sheet.addCell(label);
i++;
}
i=rowCount
for( item in holderResponse.getNodeValues( "//xmlns:issues/xmlns:e/xmlns:fields[1]/xmlns:issuetype[1]/xmlns:name[1]" )){
//log.info "Type : [$item]"
Label label = new Label(3, i, item); //column=0=A,row=0=1
sheet.addCell(label);
i++;
}
i=rowCount
for( item in holderResponse.getNodeValues( "//xmlns:issues/xmlns:e/xmlns:fields[1]/xmlns:customfield_10630[1]" )){
//log.info "Points : [$item]"
//log.info "rowCount : " + i.toString()
//String sPoints = item.substring(0, item.indexOf('.'))
//int sPoints = Integer.parseInt(item)
//Label label = new Label(4, i, sPoints); //column=0=A,row=0=1
Label label = new Label(4, i, item); //column=0=A,row=0=1
sheet.addCell(label);
Label label1 = new Label(5, i, epicName); //column=0=A,row=0=1
sheet.addCell(label1);

i++;
}

//Close excel
workbook.write()
workbook.close()
}
 
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 testRunner.cancel( "time to go home" )
return null
}
else
{
 propTestStep.setPropertyValue("rowCount", i.toString())	
 testRunner.gotoStepByName("Groovy Script - DataSource") //setStartStep
 log.info "Goto Groovy Script - DataSource"
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script – Data Loop" disabled="true"><con:settings/><con:config><script>/*&lt;/pre>
@Author : Pradeep Bishnoi
@Description : Data Source Looper responsible for looping a specific teststep.
@GroovyTestStepName : "Groovy Script - Data Loop"
*/
//import necessary libs
import jxl.*
import jxl.write.*
import com.eviware.soapui.support.XmlHolder

def myTestCase = context.testCase
log.info myTestCase.getLabel()
log.info myTestCase.getParent().getLabel()

def propTestStep = myTestCase.getTestStepByName("Property – Looper") // get the Property TestStep
def endLoop = propTestStep.getPropertyValue("StopLoop").toString()
log.info endLoop
def runner
//Define the object for the collection of requests in the soapUI test case
def restTestStep = myTestCase.getTestStepByName("REST Get Epic Children") // get the Property TestStep
log.info restTestStep.name


//Groovy Script to loop through each requests in the test case.
restTestStep.each{
 //Creating file name using current date and time
 Date startTime = new Date();
 def cur_Time = startTime.getMonth() + "_" + startTime.getDate();
 cur_Time = cur_Time + "_" + startTime.getHours() + startTime.getMinutes() +startTime.getSeconds()
 def fileName = it.name + "_" + propTestStep.getPropertyValue("Value").toString()
 int count_number = Integer.parseInt( propTestStep.getPropertyValue("Count"))
 log.info "Count: " + count_number
 def inputFileResponse = new File("D:\\Temp\\JIRA\\"+ "Response_" + fileName+".xml")
//Writing soapUI response to the file
 inputFileResponse.write(context.testCase.getTestStepByName(it.name).getProperty("ResponseAsXml").value)

// create an XmlHolder
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
// get the response as string
def responseAsString = context.testCase.getTestStepByName(it.name).getProperty("ResponseAsXml").value    
log.info responseAsString
def holderResponse = groovyUtils.getXmlHolder(responseAsString)
// define namespace
holderResponse.namespaces["xmlns"] = "https://jira.eurodir.eu/jira/rest/api/2/search"

// get the node value
def nodeValue = holderResponse.getNodeValue("//xmlns:maxResults[1]")
log.info "Story count: " + nodeValue
def epicName = holderResponse.getNodeValue("//xmlns:issues[1]/xmlns:e[1]/xmlns:fields[1]/xmlns:customfield_10931[1]")
log.info "Epicsname: " + epicName

//Write response to Excel;
WritableWorkbook workbook = Workbook.createWorkbook(new File("D:\\Temp\\JIRA\\output.xls"))
WritableSheet sheet = workbook.createSheet(epicName,count_number )
 log.info "Count: " + count_number
log.info(sheet.isHidden())


// loop item nodes in response message
i=0;
for( item in holderResponse.getNodeValues( "//xmlns:issues/xmlns:e/xmlns:key" )){
log.info "Key : [$item]"
Label label = new Label(0, i, item); //column=0=A,row=0=1
sheet.addCell(label);
i++;
}
i=0
for( item in holderResponse.getNodeValues( "//xmlns:issues/xmlns:e/xmlns:fields[1]/xmlns:summary[1]" )){
log.info "Summary : [$item]"
Label label = new Label(1, i, item); //column=0=A,row=0=1
sheet.addCell(label);
i++;
}
i=0
for( item in holderResponse.getNodeValues( "//xmlns:issues/xmlns:e/xmlns:fields[1]/xmlns:status[1]/xmlns:name[1]" )){
log.info "Status : [$item]"
Label label = new Label(2, i, item); //column=0=A,row=0=1
sheet.addCell(label);
i++;
}
i=0
for( item in holderResponse.getNodeValues( "//xmlns:issues/xmlns:e/xmlns:fields[1]/xmlns:issuetype[1]/xmlns:name[1]" )){
log.info "Type : [$item]"
Label label = new Label(3, i, item); //column=0=A,row=0=1
sheet.addCell(label);
i++;
}
i=0
for( item in holderResponse.getNodeValues( "//xmlns:issues/xmlns:e/xmlns:fields[1]/xmlns:customfield_10630[1]" )){
log.info "Points : [$item]"
Label label = new Label(4, i, item); //column=0=A,row=0=1
sheet.addCell(label);
i++;
}


//Label label1 = new Label(2, 2, "Column C, Row 3");
//sheet.addCell(label1);
workbook.write()
workbook.close()

}
 
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("Groovy Script - DataSource") //setStartStep
 log.info "Goto Groovy Script - DataSource"
}
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Looping v2" searchProperties="true" id="0dd336a9-e326-4141-af69-9946a0fc1049"><con:settings/><con:testStep type="groovy" name="Setup Loop" disabled="true"><con:settings/><con:config><script>import javax.naming.Context

def myTestCase = context.testCase

def propTestStep = myTestCase.getTestStepByName("Property – Looper") // get the Property TestStep
propTestStep.setPropertyValue("Total", "")
propTestStep.setPropertyValue("Value", "")
propTestStep.setPropertyValue("Count", "0")
propTestStep.setPropertyValue("Next", "0")
propTestStep.setPropertyValue("Stoploop", "F")
propTestStep.setPropertyValue("rowCount", "1")
propTestStep.setPropertyValue("Epics", "")

</script></con:config></con:testStep><con:testStep type="restrequest" name="Get_Epics"><con:settings/><con:config service="https://jira.eurodir.eu" resourcePath="/jira/rest/api/2/search" methodName="Search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get_Epics" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://jira.eurodir.eu</con:endpoint><con:request/><con:originalUri>https://jira.eurodir.eu/jira/rest/api/2/search</con:originalUri><con:credentials><con:username>mdiest</con:username><con:password>B1lderdijk@26</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="jql" value="project='DESIGN'&amp;fixVersion='${#TestSuite#BRMValue}'&amp;issuetype='Epic'" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>jql</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Epic Property Transfer" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="false" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>EpicList</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Get_Epics</con:sourceStep><con:sourcePath>//Reponse/issues/e/key</con:sourcePath><con:targetType>Epics</con:targetType><con:targetStep>Property – Looper</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Transfer Epics"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import javax.naming.Context


def myTestCase = context.testCase
log.info "Testcase: " + myTestCase.getLabel()
log.info "Testsuite: " + myTestCase.getParent().getLabel()

// create an XmlHolder
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
// get the response as string
def epicResponseAsString = context.testCase.getTestStepByName("Get_Epics").getProperty("ResponseAsXml").value  
def epicHolderResponse = groovyUtils.getXmlHolder(epicResponseAsString)
log.info epicResponseAsString
// define namespace
epicHolderResponse.namespaces["xmlns"] = "https://jira.eurodir.eu/jira/rest/api/2/search"

// get the node value
epicStories = epicHolderResponse.getNodeValues("//xmlns:Response/xmlns:issues/xmlns:e/xmlns:key")
log.info epicStories[0]

def propTestStep = myTestCase.getTestStepByName("Property – Looper") // get the Property TestStep
propTestStep.setPropertyValue("Epics", epicStories.toString())
</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script – DataSource"><con:settings/><con:config><script>/*
@Author : Pradeep Bishnoi
@Description : Data Source to read .txt file and pass the value to corresponding property.
@GroovyTestStepName : "Groovy Script - DataSource"
*/
 
import com.eviware.soapui.support.XmlHolder
import javax.naming.Context

def myTestCase = context.testCase
def counter,next,previous,size
def propTestStep = myTestCase.getTestStepByName("Property – Looper") // get the Property TestStep
/*
File tickerEnumFile = new File("D:/Temp/JIRA/Input.txt") //make sure input.txt file already exists and contains different set of values sepearted by new line (CR).
List lines = tickerEnumFile.readLines()
*/



//List lines = propTestStep.getPropertyValue("Epics").split(",")
def fullList = []
fullListStr = propTestStep.getPropertyValue("Epics")
if (fullListStr != null &amp;&amp; fullListStr != "")
{
    //cast string to string list:
        //  break up the fullMediaNameList at commas, and itterate over the parts
        fullListStr.tokenize(',[]').each {
        // trim off leading or trailing whitespace from each part, and append as new element to the array
    fullList &lt;&lt; it.trim()
        }
}

size = fullList.size.toInteger()
log.info "Amount of Epics in BRM: " + size.toString()

propTestStep.setPropertyValue("Total", size.toString())
counter = propTestStep.getPropertyValue("Count").toString()
log.info "counter: " + counter
counter= counter.toInteger()
next = (counter > size-2? 0: counter+1)
tempValue = fullList[counter]
propTestStep.setPropertyValue("Value", tempValue)
propTestStep.setPropertyValue("Count", next.toString())
next++
log.info "Reading line : ${(counter+1)} / $fullList.size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"
if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Property – Looper"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>Total</con:name><con:value>20</con:value></con:property><con:property><con:name>Value</con:name><con:value>DESIGN-520</con:value></con:property><con:property><con:name>Count</con:name><con:value>0</con:value></con:property><con:property><con:name>Next</con:name><con:value>1</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>rowCount</con:name><con:value>51</con:value></con:property><con:property><con:name>Epics</con:name><con:value>[DESIGN-577, DESIGN-572, DESIGN-567, DESIGN-566, DESIGN-565, DESIGN-556, DESIGN-553, DESIGN-551, DESIGN-550, DESIGN-547, DESIGN-545, DESIGN-542, DESIGN-540, DESIGN-538, DESIGN-537, DESIGN-535, DESIGN-533, DESIGN-531, DESIGN-522, DESIGN-520]</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="Get Epic Children" disabled="true"><con:settings/><con:config><script>myInterface = testRunner.testCase.testSuite.project.getInterfaceByName("https://jira.eurodir.eu/jira/rest/api/2/")
myOperation = myInterface.getOperationByName("search")
myRequest = myOperation.getRequestByName("?jql=cf[10931]=DESIGN-26")
// get the context
def context = testRunner.getRunContext()
// send the request synchronous
def submitted = myRequest.submit(context,false)
// get the response
def response = submitted.getResponse()
// get the response content as string 
def content = response.getContentAsString()
// i.e check that the response contains literal 'OK'
assert content.contains('OK'),"Response not contains OK literal"</script></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="true" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>EpicValue</con:name><con:sourceType>Value</con:sourceType><con:sourceStep>Property – Looper</con:sourceStep><con:targetType>EpicValue</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="REST Get Epic Children"><con:settings/><con:config service="https://jira.eurodir.eu" resourcePath="/jira/rest/api/2/search" methodName="Search" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="REST Get Epic Children" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://jira.eurodir.eu</con:endpoint><con:request/><con:originalUri>https://jira.eurodir.eu/jira/rest/api/2/search</con:originalUri><con:credentials><con:username>mdiest</con:username><con:password>B1lderdijk@26</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="jql" value="cf[10931]=${#TestSuite#EpicValue}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>jql</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Read REST Response" disabled="true"><con:settings/><con:config><script>/*
@Author: Pradeep Bishnoi
@Description : To read the REST response and iterate node using Xpath
*/
log.info "Start"
//def testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
def xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
log.info "xmlHold: " xmlHold
/*
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context )
def holder = groovyUtils.getXmlHolder (xmlHold)
log.info holder.getXml()  // will display /Log the response in Xml
count  = holder.getNodeValue(“count(//Response/e)”)
count = count.toInteger() + 1  //converting count into Integer &amp; adding 1 for looping purpose
def xPath = “//Response/issues"

/*
for (i in 1..&lt;count)
{
xPath1 = xPath + i + "]/Name”  // Name value
xPath2 = xPath + i + “]/EmailAddresses/e”   //email Node value
log.info holder.getNodeValue(xPath1)
log.info holder.getNodeValue(xPath2)
i++
}
*/
//log.info xPath
</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script – Data Loop"><con:settings/><con:config><script>/*&lt;/pre>
@Author : Pradeep Bishnoi
@Description : Data Source Looper responsible for looping a specific teststep.
@GroovyTestStepName : "Groovy Script - Data Loop"
*/
//import necessary libs
import jxl.*
import jxl.write.*
import com.eviware.soapui.support.XmlHolder

def myTestCase = context.testCase
log.info "Testcase: " + myTestCase.getLabel()
log.info "Testsuite: " + myTestCase.getParent().getLabel()

def propTestStep = myTestCase.getTestStepByName("Property – Looper") // get the Property TestStep
def endLoop = propTestStep.getPropertyValue("StopLoop").toString()
log.info "End loop: " + endLoop.toString()
def runner
//Define the object for the collection of requests in the soapUI test case
def restTestStep = myTestCase.getTestStepByName("REST Get Epic Children") // get the Property TestStep
log.info restTestStep.name


// Groovy Script to loop through each requests in the test case.
restTestStep.each{
 // Creating file name using current date and time
 Date startTime = new Date();
 def cur_Time = startTime.getMonth() + "_" + startTime.getDate();
 cur_Time = cur_Time + "_" + startTime.getHours() + startTime.getMinutes() +startTime.getSeconds()
 def fileName = it.name + "_" + propTestStep.getPropertyValue("Value").toString()
 int rowCount = Integer.parseInt( propTestStep.getPropertyValue("rowCount"))
 log.info "rowCount: " + rowCount
 def inputFileResponse = new File("D:\\Temp\\JIRA\\"+ "Response_" + fileName+".xml")
// Writing soapUI response to the file
 inputFileResponse.write(context.testCase.getTestStepByName(it.name).getProperty("ResponseAsXml").value)

// create an XmlHolder
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
// get the response as string
def responseAsString = context.testCase.getTestStepByName(it.name).getProperty("ResponseAsXml").value    
def holderResponse = groovyUtils.getXmlHolder(responseAsString)
// define namespace
holderResponse.namespaces["xmlns"] = "https://jira.eurodir.eu/jira/rest/api/2/search"

// get the node value
epicStoryCount = holderResponse.getNodeValues("//xmlns:Response/xmlns:total")
epicName = holderResponse.getNodeValue("//xmlns:issues[1]/xmlns:e[1]/xmlns:fields[1]/xmlns:customfield_10931[1]")
log.info "Epic '" + epicName + "' has '" + epicStoryCount + "' stories"

//Write response to Excel;
Workbook workbookRead = Workbook.getWorkbook(new File("D:\\Temp\\JIRA\\output_v2.xls"))
WritableWorkbook workbook = Workbook.createWorkbook(new File("D:\\Temp\\JIRA\\output_v2.xls"), workbookRead)

Sheet sheet = workbook.getSheet(0)
//WritableSheet sheet = workbook.createSheet(epicName,0 )
log.info "rowCount: " + rowCount
//log.info(sheet.isHidden())


// loop item nodes in response message
i=rowCount;
for( item in holderResponse.getNodeValues( "//xmlns:issues/xmlns:e/xmlns:key" )){
//log.info "Key : [$item]"
Label label = new Label(0, i, item); //column=0=A,row=0=1
sheet.addCell(label);
i++;
}
i=rowCount
for( item in holderResponse.getNodeValues( "//xmlns:issues/xmlns:e/xmlns:fields[1]/xmlns:summary[1]" )){
//log.info "Summary : [$item]"
Label label = new Label(1, i, item); //column=0=A,row=0=1
sheet.addCell(label);
i++;
}
i=rowCount
for( item in holderResponse.getNodeValues( "//xmlns:issues/xmlns:e/xmlns:fields[1]/xmlns:status[1]/xmlns:name[1]" )){
//log.info "Status : [$item]"
Label label = new Label(2, i, item); //column=0=A,row=0=1
sheet.addCell(label);
i++;
}
i=rowCount
for( item in holderResponse.getNodeValues( "//xmlns:issues/xmlns:e/xmlns:fields[1]/xmlns:issuetype[1]/xmlns:name[1]" )){
//log.info "Type : [$item]"
Label label = new Label(3, i, item); //column=0=A,row=0=1
sheet.addCell(label);
i++;
}
i=rowCount
for( item in holderResponse.getNodeValues( "//xmlns:issues/xmlns:e/xmlns:fields[1]/xmlns:customfield_10630[1]" )){
//log.info "Points : [$item]"
//log.info "rowCount : " + i.toString()
//String sPoints = item.substring(0, item.indexOf('.'))
//int sPoints = Integer.parseInt(item)
//Label label = new Label(4, i, sPoints); //column=0=A,row=0=1
Label label = new Label(4, i, item); //column=0=A,row=0=1
sheet.addCell(label);
Label label1 = new Label(5, i, epicName); //column=0=A,row=0=1
sheet.addCell(label1);

i++;
}

//Close excel
workbook.write()
workbook.close()
}
 
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 testRunner.cancel( "time to go home" )
return null
}
else
{
 propTestStep.setPropertyValue("rowCount", i.toString())	
 testRunner.gotoStepByName("Groovy Script - DataSource") //setStartStep
 log.info "Goto Groovy Script - DataSource"
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script – Data Loop" disabled="true"><con:settings/><con:config><script>/*&lt;/pre>
@Author : Pradeep Bishnoi
@Description : Data Source Looper responsible for looping a specific teststep.
@GroovyTestStepName : "Groovy Script - Data Loop"
*/
//import necessary libs
import jxl.*
import jxl.write.*
import com.eviware.soapui.support.XmlHolder

def myTestCase = context.testCase
log.info myTestCase.getLabel()
log.info myTestCase.getParent().getLabel()

def propTestStep = myTestCase.getTestStepByName("Property – Looper") // get the Property TestStep
def endLoop = propTestStep.getPropertyValue("StopLoop").toString()
log.info endLoop
def runner
//Define the object for the collection of requests in the soapUI test case
def restTestStep = myTestCase.getTestStepByName("REST Get Epic Children") // get the Property TestStep
log.info restTestStep.name


//Groovy Script to loop through each requests in the test case.
restTestStep.each{
 //Creating file name using current date and time
 Date startTime = new Date();
 def cur_Time = startTime.getMonth() + "_" + startTime.getDate();
 cur_Time = cur_Time + "_" + startTime.getHours() + startTime.getMinutes() +startTime.getSeconds()
 def fileName = it.name + "_" + propTestStep.getPropertyValue("Value").toString()
 int count_number = Integer.parseInt( propTestStep.getPropertyValue("Count"))
 log.info "Count: " + count_number
 def inputFileResponse = new File("D:\\Temp\\JIRA\\"+ "Response_" + fileName+".xml")
//Writing soapUI response to the file
 inputFileResponse.write(context.testCase.getTestStepByName(it.name).getProperty("ResponseAsXml").value)

// create an XmlHolder
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
// get the response as string
def responseAsString = context.testCase.getTestStepByName(it.name).getProperty("ResponseAsXml").value    
log.info responseAsString
def holderResponse = groovyUtils.getXmlHolder(responseAsString)
// define namespace
holderResponse.namespaces["xmlns"] = "https://jira.eurodir.eu/jira/rest/api/2/search"

// get the node value
def nodeValue = holderResponse.getNodeValue("//xmlns:maxResults[1]")
log.info "Story count: " + nodeValue
def epicName = holderResponse.getNodeValue("//xmlns:issues[1]/xmlns:e[1]/xmlns:fields[1]/xmlns:customfield_10931[1]")
log.info "Epicsname: " + epicName

//Write response to Excel;
WritableWorkbook workbook = Workbook.createWorkbook(new File("D:\\Temp\\JIRA\\output.xls"))
WritableSheet sheet = workbook.createSheet(epicName,count_number )
 log.info "Count: " + count_number
log.info(sheet.isHidden())


// loop item nodes in response message
i=0;
for( item in holderResponse.getNodeValues( "//xmlns:issues/xmlns:e/xmlns:key" )){
log.info "Key : [$item]"
Label label = new Label(0, i, item); //column=0=A,row=0=1
sheet.addCell(label);
i++;
}
i=0
for( item in holderResponse.getNodeValues( "//xmlns:issues/xmlns:e/xmlns:fields[1]/xmlns:summary[1]" )){
log.info "Summary : [$item]"
Label label = new Label(1, i, item); //column=0=A,row=0=1
sheet.addCell(label);
i++;
}
i=0
for( item in holderResponse.getNodeValues( "//xmlns:issues/xmlns:e/xmlns:fields[1]/xmlns:status[1]/xmlns:name[1]" )){
log.info "Status : [$item]"
Label label = new Label(2, i, item); //column=0=A,row=0=1
sheet.addCell(label);
i++;
}
i=0
for( item in holderResponse.getNodeValues( "//xmlns:issues/xmlns:e/xmlns:fields[1]/xmlns:issuetype[1]/xmlns:name[1]" )){
log.info "Type : [$item]"
Label label = new Label(3, i, item); //column=0=A,row=0=1
sheet.addCell(label);
i++;
}
i=0
for( item in holderResponse.getNodeValues( "//xmlns:issues/xmlns:e/xmlns:fields[1]/xmlns:customfield_10630[1]" )){
log.info "Points : [$item]"
Label label = new Label(4, i, item); //column=0=A,row=0=1
sheet.addCell(label);
i++;
}


//Label label1 = new Label(2, 2, "Column C, Row 3");
//sheet.addCell(label1);
workbook.write()
workbook.close()

}
 
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("Groovy Script - DataSource") //setStartStep
 log.info "Goto Groovy Script - DataSource"
}
</script></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>EpicValue</con:name><con:value>DESIGN-520</con:value></con:property><con:property><con:name>BRMValue</con:name><con:value>BR 8</con:value></con:property></con:properties></con:testSuite><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/></con:soapui-project>